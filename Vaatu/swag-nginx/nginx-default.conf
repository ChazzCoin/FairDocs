## Version 2021/04/27 - Changelog: https://github.com/linuxserver/docker-swag/commits/master/root/defaults/default

error_page 502 /502.html;

# redirect all traffic to https
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}

# main server block
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name radio.underthebunk.live;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
        proxy_pass http://192.168.1.80;
    }


}


server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name www.underthebunk.live;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
        proxy_pass http://192.168.1.166:3000;
    }


}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name api.vaatu.co;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
    	#hark api
        proxy_pass http://192.168.1.166:3671;
    }

}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name fiverr.vaatu.co;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
    	#hark api
        proxy_pass http://192.168.1.166:3671;
    }

}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name sozindb.vaatu.co;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
    	#sozin mongodb
        proxy_pass http://192.168.1.180:27017;
    }

}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name ssh.vaatu.co;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
    	#ssh vaatu
        proxy_pass http://192.168.1.229:22;
    }

}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name sonarr.vaatu.co;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
    	#rewrite admin.glewme.tv$ http://aokiromeo.duckdns.org/public/yusufmiles redirect;
        proxy_pass http://192.168.1.229:8989;
    }

}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name selim.vaatu.co;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
        proxy_pass http://192.168.1.80:8686;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name vint.vaatu.co;

    include /config/nginx/ssl.conf;
    client_max_body_size 0;

    location / {
        proxy_pass http://192.168.1.80:4533;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name jacket.vaatu.co;

    include /config/nginx/ssl.conf;
    client_max_body_size 0;

    location / {
        proxy_pass http://192.168.1.229:9117;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name swag.vaatu.co;

    include /config/nginx/ssl.conf;
    client_max_body_size 0;

    location / {
        proxy_pass http://192.168.1.229:81;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name home.vaatu.co;

    include /config/nginx/ssl.conf;
    client_max_body_size 0;

    location / {
        proxy_pass https://192.168.1.229:8443;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name rs.vaatu.co;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
    	#rewrite admin.glewme.tv$ http://aokiromeo.duckdns.org/public/yusufmiles redirect;
        proxy_pass http://192.168.1.229:22;
    }


}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name radio.vaatu.co;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
        proxy_pass http://192.168.1.80;
    }


}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name vint.underthebunk.live;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
	include /config/nginx/proxy.conf;
        include /config/nginx/resolver.conf;
    	#rewrite admin.glewme.tv$ http://aokiromeo.duckdns.org/public/yusufmiles redirect;
        proxy_pass http://192.168.1.80:4533;
    }


}


server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name docker.vaatu.co;

    # all ssl related config moved to ssl.conf
    include /config/nginx/ssl.conf;

    client_max_body_size 0;

    location / {
	include /config/nginx/proxy.conf;
        include /config/nginx/resolver.conf;
        set $upstream_app vaatainer;
        set $upstream_port 9000;
        set $upstream_proto http;
        proxy_pass $upstream_proto://$upstream_app:$upstream_port;

        proxy_hide_header X-Frame-Options; # Possibly not needed after Portainer 1.20.0

	#proxy_pass http://192.168.1.229:9000;
    }


}


# sample reverse proxy config without url base, but as a subdomain "cp", ip and port same as above
# notice this is a new server block, you need a new server block for each subdomain
#server {
#    listen 443 ssl http2;
#    listen [::]:443 ssl http2;
#
#    root /config/www;
#    index index.html index.htm index.php;
#
#    server_name cp.*;
#
#    include /config/nginx/ssl.conf;
#
#    client_max_body_size 0;
#
#    location / {
#        auth_basic "Restricted";
#        auth_basic_user_file /config/nginx/.htpasswd;
#        include /config/nginx/proxy.conf;
#        proxy_pass http://192.168.1.50:5050;
#    }
#}

# sample reverse proxy config for "heimdall" via subdomain, with ldap authentication
# ldap-auth container has to be running and the /config/nginx/ldap.conf file should be filled with ldap info
# notice this is a new server block, you need a new server block for each subdomain
#server {
#    listen 443 ssl http2;
#    listen [::]:443 ssl http2;
#
#    root /config/www;
#    index index.html index.htm index.php;
#
#    server_name heimdall.*;
#
#    include /config/nginx/ssl.conf;
#
#    include /config/nginx/ldap.conf;
#
#    client_max_body_size 0;
#
#    location / {
#        # the next two lines will enable ldap auth along with the included ldap.conf in the server block
#        auth_request /auth;
#        error_page 401 =200 /ldaplogin;
#
#        include /config/nginx/proxy.conf;
#        resolver 127.0.0.11 valid=30s;
#        set $upstream_app heimdall;
#        set $upstream_port 443;
#        set $upstream_proto https;
#        proxy_pass $upstream_proto://$upstream_app:$upstream_port;
#    }
#}

# sample reverse proxy config for "heimdall" via subdomain, with Authelia
# Authelia container has to be running in the same user defined bridge network, with container name "authelia", and with 'path: "authelia"' set in its configuration.yml
# notice this is a new server block, you need a new server block for each subdomain
#server {
#    listen 443 ssl http2;
#    listen [::]:443 ssl http2;
#
#    root /config/www;
#    index index.html index.htm index.php;
#
#    server_name heimdall.*;
#
#    include /config/nginx/ssl.conf;
#
#    include /config/nginx/authelia-server.conf;
#
#    client_max_body_size 0;
#
#    location / {
#        # the next line will enable Authelia along with the included authelia-server.conf in the server block
#        include /config/nginx/authelia-location.conf;
#
#        include /config/nginx/proxy.conf;
#        resolver 127.0.0.11 valid=30s;
#        set $upstream_app heimdall;
#        set $upstream_port 443;
#        set $upstream_proto https;
#        proxy_pass $upstream_proto://$upstream_app:$upstream_port;
#    }
#}

# enable subdomain method reverse proxy confs
include /config/nginx/proxy-confs/*.subdomain.conf;
# enable proxy cache for auth
proxy_cache_path cache/ keys_zone=auth_cache:10m;